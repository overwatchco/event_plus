// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  ADMIN
  REPRESENTANTE
  USUARIO
  NONE
}

model Usuario {
  id       String  @id @default(uuid())
  nit      String? @unique
  cedula   Int     @unique
  nombre   String
  email    String  @unique
  password String
  rol      Roles   @default(NONE)
}

// TODO: Posible cambio a la estructura usando encargado
// y trabajadores asociados

model Empresa {
  id           String     @id @default(uuid())
  nit          String     @unique
  nombre       String
  pais         String
  departamento String
  ciudad       String
  direccion    String
  telefono     Int
  Contrato     Contrato[]
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model Contrato {
  id        String    @id @default(uuid())
  nit       String    @unique
  objeto    String
  empresa   Empresa   @relation(fields: [empresaId], references: [id])
  empresaId String
  reunion   Reunion[]
  evento    Evento[]
}

model Reunion {
  id         String   @id @default(uuid())
  objetivo   String
  contrato   Contrato @relation(fields: [contratoId], references: [id])
  contratoId String
  acta       Acta[]
}

model Acta {
  id        String  @id @default(uuid())
  reunion   Reunion @relation(fields: [reunionId], references: [id])
  reunionId String
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?
}

model Evento {
  id             String          @id @default(uuid())
  fecha          DateTime
  nombre         String
  requerimientos Requerimiento[]
  contrato       Contrato        @relation(fields: [contratoId], references: [id])
  contratoId     String
}

model Requerimiento {
  id          String   @id @default(uuid())
  evento      Evento   @relation(fields: [eventoId], references: [id])
  nombre      String
  descripcion String?
  eventoId    String
  imagen      Imagen[]
}

model Imagen {
  id              String        @id @default(uuid())
  path            String        @unique
  requerimiento   Requerimiento @relation(fields: [requerimientoId], references: [id])
  requerimientoId String
}

//Auth js

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  roles         String[]  @default(["NONE"])
  isActive      Boolean   @default(true)

  image    String?
  accounts Account[]
  sessions Session[]
  empresas Empresa[]
  actas    Acta[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
